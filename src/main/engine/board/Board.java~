// THe board will not be drawn graphically in this file
// But when it is:
// Do NOT reverse fen strings or anything, just either draw the board from 0,0 or from 7,7 depending on whose perspective it is
// Basically, keep the board internally always from white's perspective, then if black is playing, flip the board WHEN IT IS DISPLAYED
package engine.board;


import util.Log;
import util.Coordinate;
import util.Vector;
import engine.move.Move;
import engine.move.MoveGenerator;
import engine.piece.Piece;


public class Board {

	public static final String START_FEN = "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";
	

	public static final class State {
		public static final int ONGOING = 0;
		public static final int WIN_WHITE = 1;
		public static final int WIN_BLACK = 2;
		public static final int DRAW_STALEMATE = 3;
		public static final int DRAW_FIFTY_MOVE = 4;
		public static final int DRAW_REPETITION = 5;
		public static final int DRAW_MATERIAL = 6; // Unused as this engine cannot calculate insufficient material
	}
	

	private BoardInfo boardInfo;


	public Board(BoardInfo boardInfo) {
		this.boardInfo = boardInfo;
	}


	public BoardInfo getInfo() {
		return (BoardInfo) this.boardInfo.clone();
	}


	// Move is assumed to be legal at this point, although there will be checks to make sure the start/end tiles
	// are on the board and move an actual piece
	public void makeMove(Move move) {
		// Set up important information
		Coordinate startTile = move.getStartTile();
		Coordinate endTile = move.getEndTile();
		int flag = move.getFlag();

		Piece movePiece = boardInfo.getPiece(startTile);
		Piece capturedPiece = boardInfo.getPiece(endTile);

		Coordinate castleKRook = new Coordinate(7, 0);
		Coordinate castleQRook = new Coordinate(0, 0);
		Coordinate castlekRook = new Coordinate(7, 7);
		Coordinate castleqRook = new Coordinate(0, 7);

		int pawnDir = (this.boardInfo.whiteToMove) ? 1 : -1;
		Vector enPassantVector = new Vector(0, -1 * pawnDir);
		Coordinate enPassantTile = this.boardInfo.enPassantTile;
		Coordinate enPassantPieceTile = null;
		Piece enPassantPiece = null;
		if (enPassantTile != null) {
			enPassantPieceTile = enPassantTile.shift(enPassantVector);
			enPassantPiece = this.boardInfo.getPiece(enPassantPieceTile);
		}

		// Do basic validity checks
		if (!startTile.isValidTile() ||
			!endTile.isValidTile() ||
			movePiece == null) {
			Log.stdlog(Log.ERROR, "Board", "makeMove validity checks failed, ignoring move");
			Log.stdlog(Log.ERROR, "Board", "\tstartTile is valid: " + startTile.isValidTile());
			Log.stdlog(Log.ERROR, "Board", "\tendTile is valid: " + endTile.isValidTile());
			Log.stdlog(Log.ERROR, "Board", "\ttmovePiece is null: " + (movePiece == null));
			return;
		}

		// Update halfmoves
		this.boardInfo.halfmoves++;

		// Caputes (en passant and regular)
		if (capturedPiece != null) {
			this.boardInfo.halfmoves = 0;
			this.boardInfo.setPiece(endTile, null);
		}
		else if (move.isEnPassant()) {
			this.boardInfo.halfmoves = 0;
			this.boardInfo.setPiece(enPassantPieceTile, null);
		}

		// Movement
		this.boardInfo.setPiece(endTile, movePiece);
		this.boardInfo.setPiece(startTile, null);
		if (movePiece.getType() == Piece.Type.PAWN)
			this.boardInfo.halfmoves = 0;

		// Castling
		if (move.isCastleKingside()) {
			Coordinate rookStartTile = endTile.shift(new Vector(1, 0));
			Coordinate rookEndTile = endTile.shift(new Vector(-1, 0));
			Piece rook = this.boardInfo.getPiece(rookStartTile);
			this.boardInfo.setPiece(rookEndTile, rook);
			this.boardInfo.setPiece(rookStartTile, null);
		}
		else if (move.isCastleQueenside()) {
			Coordinate rookStartTile = endTile.shift(new Vector(-2, 0));
			Coordinate rookEndTile = endTile.shift(new Vector(1, 0));
			Piece rook = this.boardInfo.getPiece(rookStartTile);
			this.boardInfo.setPiece(rookEndTile, rook);
			this.boardInfo.setPiece(rookStartTile, null);
		}

		// King moved, updating castling rights
		if (movePiece.getType() == Piece.Type.KING) {
			if (this.boardInfo.whiteToMove) {
				this.boardInfo.castleK = false;
				this.boardInfo.castleQ = false;
			}
			else {
				this.boardInfo.castlek = false;
				this.boardInfo.castleq = false;
			}
		}
		// Rook moved, update castling rights
		else if (movePiece.getType() == Piece.Type.ROOK) {
			if (startTile.equals(castleKRook)) this.boardInfo.castleK = false;
			else if (startTile.equals(castleQRook)) this.boardInfo.castleQ = false;
			else if (startTile.equals(castlekRook)) this.boardInfo.castlek = false;
			else if (startTile.equals(castleqRook)) this.boardInfo.castleq = false;
		}
		// Rook captured, update castling rights
		else if (capturedPiece != null && capturedPiece.getType() == Piece.Type.ROOK) {
			if (endTile.equals(castleKRook)) this.boardInfo.castleK = false;
			else if (endTile.equals(castleQRook)) this.boardInfo.castleQ = false;
			else if (endTile.equals(castlekRook)) this.boardInfo.castlek = false;
			else if (endTile.equals(castleqRook)) this.boardInfo.castleq = false;
		}

		// Promotion
		if (move.isPromotion()) {
			int type = Piece.Type.NONE;
			int color = (this.boardInfo.whiteToMove) ? Piece.Color.WHITE : Piece.Color.BLACK;

			switch (flag) {
			case Move.Flag.PROMOTE_KNIGHT:
				type = Piece.Type.KNIGHT;
				break;
			case Move.Flag.PROMOTE_BISHOP:
				type = Piece.Type.BISHOP;
				break;
			case Move.Flag.PROMOTE_ROOK:
				type = Piece.Type.ROOK;
				break;
			case Move.Flag.PROMOTE_QUEEN:
				type = Piece.Type.QUEEN;
				break;
			}

			this.boardInfo.setPiece(endTile, new Piece(type, color));
		}

		// Update after move
		if (move.isPawnTwoForward())
			this.boardInfo.enPassantTile = endTile.shift(enPassantVector);
		else
			this.boardInfo.enPassantTile = null;

		this.boardInfo.updateAfterMove();
	}

}
