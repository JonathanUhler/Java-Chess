package engine.move;


import util.Log;
import util.Coordinate;
import util.Vector;
import engine.piece.Piece;
import java.util.ArrayList;
import java.io.Serializable;
import javax.swing.JComboBox;


public class Move implements Serializable {

	public static final class Flag {
		public static final int NONE = 0;
		public static final int PAWN_TWO_FORWARD = 1;
		public static final int EN_PASSANT = 2;
		public static final int PROMOTE_KNIGHT = 3;
		public static final int PROMOTE_BISHOP = 4;
		public static final int PROMOTE_ROOK = 5;
		public static final int PROMOTE_QUEEN = 6;
		public static final int CASTLE_KINGSIDE = 7;
		public static final int CASTLE_QUEENSIDE = 8;

		private static final int minFlag = 0;
		private static final int maxFlag = 8;


		public static boolean isValid(int flag) {
			return flag >= Flag.minFlag && flag <= Flag.maxFlag;
		}


		public static int inferFlag(Piece piece, Coordinate startTile, Coordinate endTile,
									Coordinate enPassantTile, int color) {
			if (piece == null || startTile == null || endTile == null ||
				!startTile.isValidTile() || !endTile.isValidTile())
				return Flag.NONE;

			if (piece.getType() == Piece.Type.PAWN) {
				int promotionRowY = (color == Piece.Color.WHITE) ? 7 : 0;
				ArrayList<Coordinate> promotionRowTiles = new ArrayList<>();
				for (int x = 0; x < 8; x++)
					promotionRowTiles.add(new Coordinate(x, promotionRowY));
				int yOffset = (color == Piece.Color.WHITE) ? 1 : -1;
				
				if (startTile.shift(new Vector(0, 2 * yOffset)).equals(endTile))
					return Flag.PAWN_TWO_FORWARD;
				
				else if (enPassantTile != null &&
						 endTile.equals(enPassantTile))
					return Flag.EN_PASSANT;
				
				else if (promotionRowTiles.contains(endTile)) {
					String[] promotionOptions = {"Queen", "Rook", "Bishop", "Knight"};
					JComboBox<String> promotionComboBox = new JComboBox<String>(promotionOptions);
					Log.gfxmsg("Promote to...", promotionComboBox);
					String promotionPiece = (String) promotionComboBox.getSelectedItem();
					switch (promotionPiece) {
					case "Queen":
						return Flag.PROMOTE_QUEEN;
					case "Rook":
						return Flag.PROMOTE_ROOK;
					case "Bishop":
						return Flag.PROMOTE_BISHOP;
					case "Knight":
						return Flag.PROMOTE_KNIGHT;
					}
				}
			}
			else if (piece.getType() == Piece.Type.KING) {
				if (startTile.shift(new Vector(2, 0)).equals(endTile))
					return Flag.CASTLE_KINGSIDE;
				
				else if (startTile.shift(new Vector(-2, 0)).equals(endTile))
					return Flag.CASTLE_QUEENSIDE;
			}

			return Flag.NONE;
		}
	}
	

	private Coordinate startTile;
	private Coordinate endTile;
	private int flag;


	public Move(Coordinate startTile, Coordinate endTile) {
		this(startTile, endTile, Flag.NONE);
	}


	public Move(Coordinate startTile, Coordinate endTile, int flag) {
		this.startTile = startTile;
		this.endTile = endTile;

		if (!startTile.isValidTile() ||
			!endTile.isValidTile())
			Log.stdlog(Log.ERROR, "Move", "constructed with invalid start or end tile");

		if (Flag.isValid(flag)) {
			this.flag = flag;
		}
		else {
			Log.stdout(Log.ERROR, "Move", "Move object created with invalid flag, defaulting to NONE");
			this.flag = Flag.NONE;
		}
	}


	public Coordinate getStartTile() {
		return this.startTile;
	}


	public Coordinate getEndTile() {
		return this.endTile;
	}


	public int getFlag() {
		return this.flag;
	}


	public boolean isPromotion() {
		if (this.flag == Flag.PROMOTE_KNIGHT ||
			this.flag == Flag.PROMOTE_BISHOP ||
			this.flag == Flag.PROMOTE_ROOK ||
			this.flag == Flag.PROMOTE_QUEEN)
			return true;
		return false;
	}


	public boolean isEnPassant() {
		return this.flag == Flag.EN_PASSANT;
	}


	public boolean isPawnTwoForward() {
		return this.flag == Flag.PAWN_TWO_FORWARD;
	}


	public boolean isCastleKingside() {
		return this.flag == Flag.CASTLE_KINGSIDE;
	}


	public boolean isCastleQueenside() {
		return this.flag == Flag.CASTLE_QUEENSIDE;
	}


	@Override
	public boolean equals(Object obj) {
		Move mObj;
		try {
		    mObj = (Move) obj;
		}
		catch (ClassCastException e) {
			return false;
		}

		if (mObj == null)
			return false;

		if (mObj.getStartTile().equals(this.startTile) &&
			mObj.getEndTile().equals(this.endTile) &&
			mObj.getFlag() == this.flag)
			return true;

		return false;
	}


	@Override
	public String toString() {
		return this.startTile + " -> " + this.endTile + " (flag: " + this.flag + ")";
	}

}
